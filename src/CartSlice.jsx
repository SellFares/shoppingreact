// src/CartSlice.jsx
import { createSlice } from '@reduxjs/toolkit';

// Define the initial state for the cart
const initialState = {
  items: [], // Each item: { name, image, price, quantity }
};

export const CartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    // Reducer for adding an item to the cart
    // action.payload is expected to be the full plant object
    addItem: (state, action) => {
      const newItemFromPayload = action.payload;
      const existingItem = state.items.find(item => item.name === newItemFromPayload.name);

      if (existingItem) {
        // If item already exists, increment its quantity
        existingItem.quantity++;
      } else {
        // If item doesn't exist, add it to the cart with quantity 1.
        state.items.push({
          name: newItemFromPayload.name,
          image: newItemFromPayload.image,
          price: newItemFromPayload.price, // Ensure price is a number
          quantity: 1,
        });
      }
    },

    // Reducer for removing an item from the cart
    // action.payload is expected to be the name of the item (string)
    removeItem: (state, action) => {
      const itemNameToRemove = action.payload;
      state.items = state.items.filter(item => item.name !== itemNameToRemove);
    },

    // Reducer for updating the quantity of an item in the cart
    // action.payload is expected to be an object: { name: string, amount: number }
    // 'amount' is the change in quantity, e.g., +1 for increment, -1 for decrement.
    updateQuantity: (state, action) => {
      const { name, amount } = action.payload;
      const itemToUpdate = state.items.find(item => item.name === name);

      if (itemToUpdate) {
        itemToUpdate.quantity += amount;

        // If quantity becomes 0 or less after updating, remove the item from the cart
        if (itemToUpdate.quantity <= 0) {
          state.items = state.items.filter(item => item.name !== name);
        }
      }
    },
  },
});

// Export the action creators, generated by createSlice
export const { addItem, removeItem, updateQuantity } = CartSlice.actions;

// Selector functions to get data from the cart state

// Selects all items currently in the cart
export const selectCartItems = (state) => state.cart.items;

// Selects the total number of individual plants in the cart (sum of quantities)
export const selectTotalCartItems = (state) =>
  state.cart.items.reduce((total, item) => total + item.quantity, 0);

// Selects the total price of all items in the cart
export const selectTotalPrice = (state) =>
  state.cart.items.reduce((total, item) => total + (item.price * item.quantity), 0);

// Export the reducer as the default export to be used in the store configuration
export default CartSlice.reducer;
